/*
========================================================================================
   Nextflow Configuration File
========================================================================================
*/

// Global default params
params {
    // Pipeline version
    version = '1.0.0'
    
    // Output options
    publish_dir_mode = 'copy'
    
    // Max resource options
    max_cpus   = 16
    max_memory = 128.GB
    max_time   = 240.h
}

// Load base config
includeConfig 'conf/base.config'

// Profiles for different execution environments
profiles {
    
    // Local execution with Docker
    docker {
        docker.enabled = true
        docker.userEmulation = true
        singularity.enabled = false
        conda.enabled = false
        includeConfig 'conf/docker.config'
    }
    
    // Local execution with Singularity
    singularity {
        singularity.enabled = true
        singularity.autoMounts = true
        docker.enabled = false
        conda.enabled = false
        includeConfig 'conf/singularity.config'
    }
    
    // Local execution with Conda
    conda {
        conda.enabled = true
        docker.enabled = false
        singularity.enabled = false
        includeConfig 'conf/conda.config'
    }
    
    // SLURM HPC cluster
    slurm {
        process.executor = 'slurm'
        process.queue = 'normal'
        singularity.enabled = true
        singularity.autoMounts = true
        includeConfig 'conf/slurm.config'
    }
    
    // AWS Batch
    awsbatch {
        process.executor = 'awsbatch'
        process.queue = 'metagenomics-queue'
        aws.region = 'us-east-1'
        aws.batch.cliPath = '/home/ec2-user/miniconda/bin/aws'
        includeConfig 'conf/awsbatch.config'
    }
    
    // Test profile with small dataset
    test {
        includeConfig 'conf/test.config'
    }
}

// Manifest information
manifest {
    name = 'metagenomics-pipeline'
    author = 'Based on workflows by Ashok K. Sharma'
    homePage = 'https://github.com/ashoks773'
    description = 'Comprehensive metagenomic analysis pipeline'
    mainScript = 'main.nf'
    nextflowVersion = '>=21.10.0'
    version = '1.0.0'
}

// Report options
report {
    enabled = true
    file = "${params.outdir}/pipeline_info/execution_report.html"
}

timeline {
    enabled = true
    file = "${params.outdir}/pipeline_info/execution_timeline.html"
}

trace {
    enabled = true
    file = "${params.outdir}/pipeline_info/execution_trace.txt"
}

dag {
    enabled = true
    file = "${params.outdir}/pipeline_info/pipeline_dag.svg"
}

// Function to ensure that resource requirements don't go beyond maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min(obj, params.max_cpus as int)
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
